//This File is autogenerated, DO NOT touch this file!
export module AjaxService {
    function BuildQuery<T>(qName: string, arr: T[]): string {

        var query = "?";
        arr.forEach((item) => {
            query += `&${qName}=${item}`;
        });
        if (query == "?") {
            return "";
        }
        return query;
    }

    async function FetchAsync<TOut>(url: string, method: string, headers?: HeadersInit, body?: BodyInit): Promise<OneOf<Response, TOut>> {
        let request: RequestInit = {
            method: method,
            headers: {
                "accept": "text/plain",
                "Content-Type": "application/json",
                ...headers,
            },
        };
        if (body != null) {
            request.body = body;
        }
        let response = await fetch(url, request);
        return response.ok ? Right.Create(JSON.parse(await response.json())) : Left.Create(response);
    }


    export class HomeController {
        public async IndexFunctionAsync(strArr: string[] = [], intArr: FirstDto[] = [], someBool: boolean = false): Promise<OneOf<Response, AnotherDto[]>> {
            let url = "d/da"+ BuildQuery<string>("strArr",strArr)+`?someBool=${someBool}`
            const response = await FetchAsync<AnotherDto[]>(url,"GET",null,JSON.stringify(intArr))
            if (response.IsRight()) {
                return Right.Create(response.Value)
            }
            return Left.Create(response.Error);
        }

        public async index2Async(fun: string = "", num: number = 0, n: bigint = undefined, someBool: boolean = false): Promise<OneOf<Response, AnotherDto>> {
            let url = "test/path";
            const response = await FetchAsync<AnotherDto>(url,"POST",{'fun':`${fun}`,'num':`${num}`,'n':`${n}`,},JSON.stringify(someBool))
            if (response.IsRight()) {
                return Right.Create(response.Value)
            }
            return Left.Create(response.Error);
        }

        public async seifefAsync(strs: string = "", f: number = 0, d: string = ""): Promise<OneOf<Response, FirstDto>> {
            let url = "/api/home"+`?f=${f}`+`?d=${d}`
            const response = await FetchAsync<FirstDto>(url,"PUT",{'strs':`${strs}`,})
            if (response.IsRight()) {
                return Right.Create(response.Value)
            }
            return Left.Create(response.Error);
        }

        public async LetsTestCamelCaseShallWeAsync(): Promise<OneOf<Response, void>> {
            let url = "another/Api/d";
            const response = await FetchAsync<void>(url,"DELETE",null)
            if (response.IsRight()) {
                return Right.Create(response.Value)
            }
            return Left.Create(response.Error);
        }

    }

}
import {OneOf,Left,Right,FirstDto,AnotherDto} from "./Models";